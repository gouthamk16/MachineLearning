# -*- coding: utf-8 -*-
"""loan_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WrA_LqH4tbG_LIwVRVqZGGrJqGHbOIii

### Loan Prediction Problem
##### Goutham 21BAI1007
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing Libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score

from sklearn import preprocessing
from sklearn.preprocessing import RobustScaler
from sklearn.metrics import mean_squared_error

# Reading the testing and training dataset
train = pd.read_csv('train_ctrUa4K.csv')
test = pd.read_csv('test_lAUu6dG.csv')

train.shape, test.shape

submission = pd.read_csv('sample_submission_49d68Cx.csv')
submission['Loan_ID'] = test['Loan_ID']

"""### Data Preprocessing"""

# Dropping the column 'loan id'
train.drop(columns = ['Loan_ID'], inplace=True)
test.drop(columns = ['Loan_ID'], inplace=True)

train.head()

# Analysing the missing values
missing= train.isnull().sum()
missing.sort_values(ascending= False, inplace=True)
missing

# Filling the missing values
train['Gender'] = train['Gender'].fillna('Male')
train['Married'] = train['Married'].fillna('Yes')
train['Dependents'] = train['Dependents'].fillna(train['Dependents'].mode()[0])
train['Self_Employed'] = train['Self_Employed'].fillna('No')
train['LoanAmount'] = train['LoanAmount'].fillna(train['LoanAmount'].mean())
train['Loan_Amount_Term'] = train['Loan_Amount_Term'].fillna(train['Loan_Amount_Term'].mode()[0])
train['Credit_History'] = train['Credit_History'].fillna(train['Credit_History'].mode()[0])

test['Gender'] = test['Gender'].fillna('Male')
test['Married'] = test['Married'].fillna('Yes')
test['Dependents'] = test['Dependents'].fillna(test['Dependents'].mode()[0])
test['Self_Employed'] = test['Self_Employed'].fillna('No')
test['LoanAmount'] = test['LoanAmount'].fillna(test['LoanAmount'].mean())
test['Loan_Amount_Term'] = test['Loan_Amount_Term'].fillna(test['Loan_Amount_Term'].mode()[0])
test['Credit_History'] = test['Credit_History'].fillna(test['Credit_History'].mode()[0])

#Encoding categorical values
label_encoder = preprocessing.LabelEncoder()
train['Gender'] = label_encoder.fit_transform(train['Gender'])
train['Gender'].unique()
train['Married'] = label_encoder.fit_transform(train['Married'])
train['Married'].unique()
train['Dependents'] = label_encoder.fit_transform(train['Dependents'])
train['Dependents'].unique()
train['Education'] = label_encoder.fit_transform(train['Education'])
train['Education'].unique()
train['Self_Employed'] = label_encoder.fit_transform(train['Self_Employed'])
train['Self_Employed'].unique()
train['Property_Area'] = label_encoder.fit_transform(train['Property_Area'])
train['Property_Area'].unique()
train['Loan_Status'] = label_encoder.fit_transform(train['Loan_Status'])
train['Loan_Status'].unique()
train['Loan_Amount_Term'] = label_encoder.fit_transform(train['Loan_Amount_Term'])
train['Loan_Amount_Term'].unique()

test['Gender'] = label_encoder.fit_transform(test['Gender'])
test['Gender'].unique()
test['Married'] = label_encoder.fit_transform(test['Married'])
test['Married'].unique()
test['Dependents'] = label_encoder.fit_transform(test['Dependents'])
test['Dependents'].unique()
test['Education'] = label_encoder.fit_transform(test['Education'])
test['Education'].unique()
test['Self_Employed'] = label_encoder.fit_transform(test['Self_Employed'])
test['Self_Employed'].unique()
test['Property_Area'] = label_encoder.fit_transform(test['Property_Area'])
test['Property_Area'].unique()
test['Loan_Amount_Term'] = label_encoder.fit_transform(test['Loan_Amount_Term'])
test['Loan_Amount_Term'].unique()

train.dtypes

# Removing outliers
z_scores = train.apply(lambda x: (x - x.mean()) / x.std())
threshold = 3
train = train[z_scores < threshold]
train.isna().sum()

train['ApplicantIncome'].fillna(train['ApplicantIncome'].mean(), inplace=True)
train['CoapplicantIncome'].fillna(train['CoapplicantIncome'].mean(), inplace=True)
train['LoanAmount'].fillna(train['LoanAmount'].mean(), inplace=True)

z_scores = test.apply(lambda x: (x - x.mean()) / x.std())
threshold = 3
test = test[z_scores < threshold]
test.isna().sum()

test['ApplicantIncome'].fillna(test['ApplicantIncome'].mean(), inplace=True)
test['CoapplicantIncome'].fillna(test['CoapplicantIncome'].mean(), inplace=True)
test['LoanAmount'].fillna(test['LoanAmount'].mean(), inplace=True)

"""### Creating the model"""

X= train.drop('Loan_Status', axis=1)
y = train['Loan_Status']
X_test = test

X_train, X_val, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

from sklearn.linear_model import LogisticRegression
regressor = LogisticRegression(max_iter=300, penalty='l1', solver='liblinear')
regressor.fit(X_train, y_train)

regressor.intercept_, regressor.coef_

# Calling the built in predict function
y_pred = regressor.predict(X_test)

# from sklearn.metrics import accuracy_score
# round(accuracy_score(y_test, y_pred)*100, 2)

# print("R Square ", regressor.score(X_test, y_test))

# print("MAE:", metrics.mean_absolute_error(y_pred, y_test))

submission['Loan_Status'] = y_pred
submission['Loan_Status'] = submission['Loan_Status'].map({1: 'Y', 0: 'N'})
submission.to_csv('submission_21BAI1007.csv', index=False)